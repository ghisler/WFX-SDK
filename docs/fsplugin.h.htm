<HTML><HEAD>
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
	
	<TITLE>fsplugin.h</TITLE>
	
	<META NAME="AUTHOR" CONTENT="Copyright ©2002-2019 Christian Ghisler">
	<META NAME="GENERATOR" CONTENT="HelpScribble 7.8.0">
<link href="ie.css" type="text/css" rel="stylesheet">
<!--[if gte IE 5]>
<style type="text/css">@import url(ie5+.css);</style>
<![endif]-->
</HEAD>
<BODY>
<div class="p8"><B>// contents of fsplugin.h&nbsp; version 2.1 (27.April.2010)</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>// ids for FsGetFile</B></div>
<div class="p8"><B>#define FS_FILE_OK 0</B></div>
<div class="p8"><B>#define FS_FILE_EXISTS 1</B></div>
<div class="p8"><B>#define FS_FILE_NOTFOUND 2</B></div>
<div class="p8"><B>#define FS_FILE_READERROR 3</B></div>
<div class="p8"><B>#define FS_FILE_WRITEERROR 4</B></div>
<div class="p8"><B>#define FS_FILE_USERABORT 5</B></div>
<div class="p8"><B>#define FS_FILE_NOTSUPPORTED 6</B></div>
<div class="p8"><B>#define FS_FILE_EXISTSRESUMEALLOWED 7</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>#define FS_EXEC_OK 0</B></div>
<div class="p8"><B>#define FS_EXEC_ERROR 1</B></div>
<div class="p8"><B>#define FS_EXEC_YOURSELF -1</B></div>
<div class="p8"><B>#define FS_EXEC_SYMLINK -2</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>#define FS_COPYFLAGS_OVERWRITE 1</B></div>
<div class="p8"><B>#define FS_COPYFLAGS_RESUME 2</B></div>
<div class="p8"><B>#define FS_COPYFLAGS_MOVE 4</B></div>
<div class="p8"><B>#define FS_COPYFLAGS_EXISTS_SAMECASE 8</B></div>
<div class="p8"><B>#define FS_COPYFLAGS_EXISTS_DIFFERENTCASE 16</B></div>
<div class="p8"><B>&nbsp;</B></div>
<div class="p8"><B>// flags for tRequestProc</B></div>
<div class="p8"><B>#define RT_Other 0</B></div>
<div class="p8"><B>#define RT_UserName 1</B></div>
<div class="p8"><B>#define RT_Password 2</B></div>
<div class="p8"><B>#define RT_Account 3</B></div>
<div class="p8"><B>#define RT_UserNameFirewall 4</B></div>
<div class="p8"><B>#define RT_PasswordFirewall 5</B></div>
<div class="p8"><B>#define RT_TargetDir 6</B></div>
<div class="p8"><B>#define RT_URL 7</B></div>
<div class="p8"><B>#define RT_MsgOK 8</B></div>
<div class="p8"><B>#define RT_MsgYesNo 9</B></div>
<div class="p8"><B>#define RT_MsgOKCancel 10</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>// flags for tLogProc</B></div>
<div class="p8"><B>#define MSGTYPE_CONNECT 1</B></div>
<div class="p8"><B>#define MSGTYPE_DISCONNECT 2</B></div>
<div class="p8"><B>#define MSGTYPE_DETAILS 3</B></div>
<div class="p8"><B>#define MSGTYPE_TRANSFERCOMPLETE 4</B></div>
<div class="p8"><B>#define MSGTYPE_CONNECTCOMPLETE 5</B></div>
<div class="p8"><B>#define MSGTYPE_IMPORTANTERROR 6</B></div>
<div class="p8"><B>#define MSGTYPE_OPERATIONCOMPLETE 7</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>// flags for FsStatusInfo</B></div>
<div class="p8"><B>#define FS_STATUS_START 0</B></div>
<div class="p8"><B>#define FS_STATUS_END 1</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>#define FS_STATUS_OP_LIST 1</B></div>
<div class="p8"><B>#define FS_STATUS_OP_GET_SINGLE 2</B></div>
<div class="p8"><B>#define FS_STATUS_OP_GET_MULTI 3</B></div>
<div class="p8"><B>#define FS_STATUS_OP_PUT_SINGLE 4</B></div>
<div class="p8"><B>#define FS_STATUS_OP_PUT_MULTI 5</B></div>
<div class="p8"><B>#define FS_STATUS_OP_RENMOV_SINGLE 6</B></div>
<div class="p8"><B>#define FS_STATUS_OP_RENMOV_MULTI 7</B></div>
<div class="p8"><B>#define FS_STATUS_OP_DELETE 8</B></div>
<div class="p8"><B>#define FS_STATUS_OP_ATTRIB 9</B></div>
<div class="p8"><B>#define FS_STATUS_OP_MKDIR 10</B></div>
<div class="p8"><B>#define FS_STATUS_OP_EXEC 11</B></div>
<div class="p8"><B>#define FS_STATUS_OP_CALCSIZE 12</B></div>
<div class="p8"><B>#define FS_STATUS_OP_SEARCH 13</B></div>
<div class="p8"><B>#define FS_STATUS_OP_SEARCH_TEXT 14</B></div>
<div class="p8"><B>#define FS_STATUS_OP_SYNC_SEARCH 15</B></div>
<div class="p8"><B>#define FS_STATUS_OP_SYNC_GET 16</B></div>
<div class="p8"><B>#define FS_STATUS_OP_SYNC_PUT 17</B></div>
<div class="p8"><B>#define FS_STATUS_OP_SYNC_DELETE 18</B></div>
<div class="p8"><B>#define FS_STATUS_OP_GET_MULTI_THREAD 19</B></div>
<div class="p8"><B>#define FS_STATUS_OP_PUT_MULTI_THREAD 20</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>#define FS_ICONFLAG_SMALL 1</B></div>
<div class="p8"><B>#define FS_ICONFLAG_BACKGROUND 2</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>#define FS_ICON_USEDEFAULT 0</B></div>
<div class="p8"><B>#define FS_ICON_EXTRACTED 1</B></div>
<div class="p8"><B>#define FS_ICON_EXTRACTED_DESTROY 2</B></div>
<div class="p8"><B>#define FS_ICON_DELAYED 3</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>#define FS_BITMAP_NONE 0</B></div>
<div class="p8"><B>#define FS_BITMAP_EXTRACTED 1</B></div>
<div class="p8"><B>#define FS_BITMAP_EXTRACT_YOURSELF 2</B></div>
<div class="p8"><B>#define FS_BITMAP_EXTRACT_YOURSELF_ANDDELETE 3</B></div>
<div class="p8"><B>#define FS_BITMAP_CACHE 256</B></div>
<div class="p8"><B>#define FS_CRYPT_SAVE_PASSWORD 1</B></div>
<div class="p8"><B>#define FS_CRYPT_LOAD_PASSWORD 2</B></div>
<div class="p8"><B>#define FS_CRYPT_LOAD_PASSWORD_NO_UI 3 // Load password only if master password has already been entered!</B></div>
<div class="p8"><B>#define FS_CRYPT_COPY_PASSWORD 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Copy encrypted password to new connection name</B></div>
<div class="p8"><B>#define FS_CRYPT_MOVE_PASSWORD 5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Move password when renaming a connection</B></div>
<div class="p8"><B>#define FS_CRYPT_DELETE_PASSWORD 6&nbsp;&nbsp;&nbsp;&nbsp; // Delete password</B></div>
<div class="p8">&nbsp;</div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>#define FS_CRYPTOPT_MASTERPASS_SET 1&nbsp;&nbsp; // The user already has a master password defined</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>#define BG_DOWNLOAD 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Plugin supports downloads in background</B></div>
<div class="p8"><B>#define BG_UPLOAD 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Plugin supports uploads in background</B></div>
<div class="p8"><B>#define BG_ASK_USER 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Plugin requires separate connection for background transfers -&gt; ask user first</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>typedef struct {</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp; DWORD SizeLow,SizeHigh;</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp; FILETIME LastWriteTime;</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp; int Attr;</B></div>
<div class="p8"><B>} RemoteInfoStruct;</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>typedef struct {</B></div>
<div class="p2"><span class="s17"><B>  </span>int size;</B></div>
<div class="p2"><span class="s17"><B>  </span>DWORD PluginInterfaceVersionLow;</B></div>
<div class="p2"><span class="s17"><B>  </span>DWORD PluginInterfaceVersionHi;</B></div>
<div class="p2"><span class="s17"><B>  </span>char DefaultIniName[MAX_PATH];</B></div>
<div class="p8"><B>} FsDefaultParamStruct;</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>// callback functions</B></div>
<div class="p8"><B>typedef int (__stdcall *tProgressProc)(int PluginNr,char* SourceName,</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char* TargetName,int PercentDone);</B></div>
<div class="p8"><B>typedef int (__stdcall *tProgressProcW)(int PluginNr,WCHAR* SourceName,</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WCHAR* TargetName,int PercentDone);</B></div>
<div class="p8"><B>typedef void (__stdcall *tLogProc)(int PluginNr,int MsgType,char* LogString);</B></div>
<div class="p8"><B>typedef void (__stdcall *tLogProcW)(int PluginNr,int MsgType,WCHAR* LogString);</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>typedef BOOL (__stdcall *tRequestProc)(int PluginNr,int RequestType,char* CustomTitle,</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char* CustomText,char* ReturnedText,int maxlen);</B></div>
<div class="p8"><B>typedef BOOL (__stdcall *tRequestProcW)(int PluginNr,int RequestType,WCHAR* CustomTitle,</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WCHAR* CustomText,WCHAR* ReturnedText,int maxlen);</B></div>
<div class="p8"><B>typedef int (__stdcall *tCryptProc)(int PluginNr,int CryptoNr,int Mode,</B></div>
<div class="p2"><span class="s17"><B> &nbsp;</span><span class="s18"> &nbsp;</span><span class="s18"> &nbsp;</span>&nbsp; char* ConnectionName,char* Password,int maxlen);</B></div>
<div class="p8"><B>typedef int (__stdcall *tCryptProcW)(int PluginNr,int CryptoNr,int Mode,</B></div>
<div class="p2"><span class="s17"><B> &nbsp;</span><span class="s18"> &nbsp;</span><span class="s18"> &nbsp;</span>&nbsp; WCHAR* ConnectionName,WCHAR* Password,int maxlen);</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>// Function prototypes</B></div>
<div class="p8"><B>int __stdcall FsInit(int PluginNr,tProgressProc pProgressProc,</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tLogProc pLogProc,tRequestProc pRequestProc);</B></div>
<div class="p8"><B>int __stdcall FsInitW(int PluginNr,tProgressProcW pProgressProcW,</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tLogProcW pLogProcW,tRequestProcW pRequestProcW);</B></div>
<div class="p8"><B>void __stdcall FsSetCryptCallback(tCryptProc pCryptProc,int CryptoNr,int Flags);</B></div>
<div class="p8"><B>void __stdcall FsSetCryptCallbackW(tCryptProcW pCryptProcW,int CryptoNr,int Flags);</B></div>
<div class="p8"><B>HANDLE __stdcall FsFindFirst(char* Path,WIN32_FIND_DATA *FindData);</B></div>
<div class="p8"><B>HANDLE __stdcall FsFindFirstW(WCHAR* Path,WIN32_FIND_DATAW *FindData);</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>BOOL __stdcall FsFindNext(HANDLE Hdl,WIN32_FIND_DATA *FindData);</B></div>
<div class="p8"><B>BOOL __stdcall FsFindNextW(HANDLE Hdl,WIN32_FIND_DATAW *FindData);</B></div>
<div class="p8"><B>int __stdcall FsFindClose(HANDLE Hdl);</B></div>
<div class="p8"><B>BOOL __stdcall FsMkDir(char* Path);</B></div>
<div class="p8"><B>BOOL __stdcall FsMkDirW(WCHAR* Path);</B></div>
<div class="p8"><B>int __stdcall FsExecuteFile(HWND MainWin,char* RemoteName,char* Verb);</B></div>
<div class="p8"><B>int __stdcall FsExecuteFileW(HWND MainWin,WCHAR* RemoteName,WCHAR* Verb);</B></div>
<div class="p8"><B>int __stdcall FsRenMovFile(char* OldName,char* NewName,BOOL Move,</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BOOL OverWrite,RemoteInfoStruct* ri);</B></div>
<div class="p8"><B>int __stdcall FsRenMovFileW(WCHAR* OldName,WCHAR* NewName,BOOL Move,</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BOOL OverWrite,RemoteInfoStruct* ri);</B></div>
<div class="p8"><B>int __stdcall FsGetFile(char* RemoteName,char* LocalName,int CopyFlags,</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RemoteInfoStruct* ri);</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>int __stdcall FsGetFileW(WCHAR* RemoteName,WCHAR* LocalName,int CopyFlags,</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RemoteInfoStruct* ri);</B></div>
<div class="p8"><B>int __stdcall FsPutFile(char* LocalName,char* RemoteName,int CopyFlags);</B></div>
<div class="p8"><B>int __stdcall FsPutFileW(WCHAR* LocalName,WCHAR* RemoteName,int CopyFlags);</B></div>
<div class="p8"><B>BOOL __stdcall FsDeleteFile(char* RemoteName);</B></div>
<div class="p8"><B>BOOL __stdcall FsDeleteFileW(WCHAR* RemoteName);</B></div>
<div class="p8"><B>BOOL __stdcall FsRemoveDir(char* RemoteName);</B></div>
<div class="p8"><B>BOOL __stdcall FsRemoveDirW(WCHAR* RemoteName);</B></div>
<div class="p8"><B>BOOL __stdcall FsDisconnect(char* DisconnectRoot);</B></div>
<div class="p8"><B>BOOL __stdcall FsDisconnectW(WCHAR* DisconnectRoot);</B></div>
<div class="p8"><B>BOOL __stdcall FsSetAttr(char* RemoteName,int NewAttr);</B></div>
<div class="p8"><B>BOOL __stdcall FsSetAttrW(WCHAR* RemoteName,int NewAttr);</B></div>
<div class="p8"><B>BOOL __stdcall FsSetTime(char* RemoteName,FILETIME *CreationTime,</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FILETIME *LastAccessTime,FILETIME *LastWriteTime);</B></div>
<div class="p8"><B>BOOL __stdcall FsSetTimeW(WCHAR* RemoteName,FILETIME *CreationTime,</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FILETIME *LastAccessTime,FILETIME *LastWriteTime);</B></div>
<div class="p8"><B>void __stdcall FsStatusInfo(char* RemoteDir,int InfoStartEnd,int InfoOperation);</B></div>
<div class="p8"><B>void __stdcall FsStatusInfoW(WCHAR* RemoteDir,int InfoStartEnd,int InfoOperation);</B></div>
<div class="p8"><B>void __stdcall FsGetDefRootName(char* DefRootName,int maxlen);</B></div>
<div class="p8"><B>int __stdcall FsExtractCustomIcon(char* RemoteName,int ExtractFlags,HICON* TheIcon);</B></div>
<div class="p8"><B>int __stdcall FsExtractCustomIconW(WCHAR* RemoteName,int ExtractFlags,HICON* TheIcon);</B></div>
<div class="p8"><B>void __stdcall FsSetDefaultParams(FsDefaultParamStruct* dps);</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>int __stdcall FsGetPreviewBitmap(char* RemoteName,int width,int height,HBITMAP* ReturnedBitmap);</B></div>
<div class="p8"><B>int __stdcall FsGetPreviewBitmapW(WCHAR* RemoteName,int width,int height,HBITMAP* ReturnedBitmap);</B></div>
<div class="p8"><B>BOOL __stdcall FsLinksToLocalFiles(void);</B></div>
<div class="p8"><B>BOOL __stdcall FsGetLocalName(char* RemoteName,int maxlen);</B></div>
<div class="p8"><B>BOOL __stdcall FsGetLocalNameW(WCHAR* RemoteName,int maxlen);</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>// ************************** content plugin extension ****************************</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>//&nbsp;</B></div>
<div class="p8"><B>#define ft_nomorefields 0</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>#define ft_numeric_32 1</B></div>
<div class="p8"><B>#define ft_numeric_64 2</B></div>
<div class="p8"><B>#define ft_numeric_floating 3</B></div>
<div class="p8"><B>#define ft_date 4</B></div>
<div class="p8"><B>#define ft_time 5</B></div>
<div class="p8"><B>#define ft_boolean 6</B></div>
<div class="p8"><B>#define ft_multiplechoice 7</B></div>
<div class="p8"><B>#define ft_string 8</B></div>
<div class="p8"><B>#define ft_fulltext 9</B></div>
<div class="p8"><B>#define ft_datetime 10</B></div>
<div class="p8"><B>#define ft_stringw 11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Should only be returned by Unicode function</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>// for FsContentGetValue</B></div>
<div class="p8"><B>#define ft_nosuchfield -1&nbsp;&nbsp; // error, invalid field number given</B></div>
<div class="p8"><B>#define ft_fileerror -2&nbsp;&nbsp;&nbsp;&nbsp; // file i/o error</B></div>
<div class="p8"><B>#define ft_fieldempty -3&nbsp;&nbsp;&nbsp; // field valid, but empty</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>#define ft_ondemand -4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // field will be retrieved only when user presses &lt;SPACEBAR&gt;</B></div>
<div class="p8"><B>#define ft_delayed 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // field takes a long time to extract -&gt; try again in background</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>// for FsContentSetValue</B></div>
<div class="p8"><B>#define ft_setsuccess 0&nbsp;&nbsp;&nbsp;&nbsp; // setting of the attribute succeeded</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>// for FsContentGetSupportedFieldFlags</B></div>
<div class="p8"><B>#define contflags_edit 1</B></div>
<div class="p8"><B>#define contflags_substsize 2</B></div>
<div class="p8"><B>#define contflags_substdatetime 4</B></div>
<div class="p8"><B>#define contflags_substdate 6</B></div>
<div class="p8"><B>#define contflags_substtime 8</B></div>
<div class="p8"><B>#define contflags_substattributes 10</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>#define contflags_substattributestr 12</B></div>
<div class="p8"><B>#define contflags_substmask 14</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>// for FsContentSetValue</B></div>
<div class="p8"><B>#define setflags_first_attribute 1&nbsp;&nbsp;&nbsp;&nbsp; // First attribute of this file</B></div>
<div class="p8"><B>#define setflags_last_attribute&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp; // Last attribute of this file</B></div>
<div class="p8"><B>#define setflags_only_date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp; // Only set the date of the datetime value!</B></div>
<div class="p8">&nbsp;</div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>#define CONTENT_DELAYIFSLOW 1&nbsp; // ContentGetValue called in foreground</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>typedef struct {</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp; int size;</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp; DWORD PluginInterfaceVersionLow;</B></div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp; DWORD PluginInterfaceVersionHi;</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>&nbsp;&nbsp;&nbsp; char DefaultIniName[MAX_PATH];</B></div>
<div class="p8"><B>} ContentDefaultParamStruct;</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>typedef struct {</B></div>
<div class="p2"><span class="s17"><B>  </span>WORD wYear;</B></div>
<div class="p2"><span class="s17"><B>  </span>WORD wMonth;</B></div>
<div class="p2"><span class="s17"><B>  </span>WORD wDay;</B></div>
<div class="p8"><B>} tdateformat,*pdateformat;</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>typedef struct {</B></div>
<div class="p2"><span class="s17"><B>  </span>WORD wHour;</B></div>
<div class="p2"><span class="s17"><B>  </span>WORD wMinute;</B></div>
<div class="p2"><span class="s17"><B>  </span>WORD wSecond;</B></div>
<div class="p8"><B>} ttimeformat,*ptimeformat;</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>int __stdcall FsContentGetSupportedField(int FieldIndex,char* FieldName,char* Units,int maxlen);</B></div>
<div class="p8"><B>int __stdcall FsContentGetValue(char* FileName,int FieldIndex,int UnitIndex,void* FieldValue,int maxlen,int flags);</B></div>
<div class="p8"><B>int __stdcall FsContentGetValueW(WCHAR* FileName,int FieldIndex,int UnitIndex,void* FieldValue,int maxlen,int flags);</B></div>
<div class="p8">&nbsp;</div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>void __stdcall FsContentStopGetValue(char* FileName);</B></div>
<div class="p8"><B>void __stdcall FsContentStopGetValueW(WCHAR* FileName);</B></div>
<div class="p8"><B>int __stdcall FsContentGetDefaultSortOrder(int FieldIndex);</B></div>
<div class="p8"><B>void __stdcall FsContentPluginUnloading(void);</B></div>
<div class="p8"><B>int __stdcall FsContentGetSupportedFieldFlags(int FieldIndex);</B></div>
<div class="p8"><B>int __stdcall FsContentSetValue(char* FileName,int FieldIndex,int UnitIndex,int FieldType,void* FieldValue,int flags);</B></div>
<div class="p8"><B>int __stdcall FsContentSetValueW(WCHAR* FileName,int FieldIndex,int UnitIndex,int FieldType,void* FieldValue,int flags);</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>BOOL __stdcall FsContentGetDefaultView(char* ViewContents,char* ViewHeaders,char* ViewWidths,char* ViewOptions,int maxlen);</B></div>
<div class="p8"><B>BOOL __stdcall FsContentGetDefaultViewW(WCHAR* ViewContents,WCHAR* ViewHeaders,WCHAR* ViewWidths,WCHAR* ViewOptions,int maxlen);</B></div>
<div class="p8">&nbsp;</div>
<div class="p8"><B>int __stdcall FsGetBackgroundFlags(void);</B></div>
<div class="p2">
</div>
</BODY></HTML>
